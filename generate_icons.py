#!/usr/bin/env python3
"""
Script pour g√©n√©rer toutes les ic√¥nes PWA √† partir du logo SVG
N√©cessite: pip install pillow cairosvg
"""

import os
from pathlib import Path
try:
    import cairosvg
    from PIL import Image, ImageDraw
except ImportError:
    print("‚ùå Modules manquants. Installez avec:")
    print("pip install pillow cairosvg")
    exit(1)

# Dossier des ic√¥nes
ICONS_DIR = Path("booker-app/public/icons")
SVG_PATH = ICONS_DIR / "logo.svg"

# Tailles d'ic√¥nes n√©cessaires
ICON_SIZES = [16, 32, 72, 96, 128, 144, 152, 167, 180, 192, 384, 512]
APPLE_SIZES = [152, 167, 180]  # Tailles sp√©cifiques iOS
SPLASH_SCREENS = [
    (640, 1136),   # iPhone 5/SE
    (750, 1334),   # iPhone 6/7/8
    (1242, 2208),  # iPhone 6/7/8 Plus
    (1125, 2436),  # iPhone X/XS
    (1284, 2778),  # iPhone 12/13 Pro
    (1170, 2532),  # iPhone 12/13 Pro Max
]

def create_png_from_svg(svg_path, output_path, size):
    """Convertit SVG en PNG √† la taille donn√©e"""
    cairosvg.svg2png(
        url=str(svg_path),
        write_to=str(output_path),
        output_width=size,
        output_height=size
    )

def create_maskable_icon(icon_path, output_path, size):
    """Cr√©e une ic√¥ne maskable (avec padding)"""
    # Ouvre l'ic√¥ne originale
    img = Image.open(icon_path)
    
    # Redimensionne √† 80% pour laisser de la place au padding
    inner_size = int(size * 0.8)
    img = img.resize((inner_size, inner_size), Image.Resampling.LANCZOS)
    
    # Cr√©e une nouvelle image avec fond transparent
    maskable = Image.new('RGBA', (size, size), (0, 0, 0, 0))
    
    # Centre l'ic√¥ne
    offset = (size - inner_size) // 2
    maskable.paste(img, (offset, offset), img if img.mode == 'RGBA' else None)
    
    maskable.save(output_path)

def create_splash_screen(base_icon_path, output_path, width, height):
    """Cr√©e un √©cran de d√©marrage pour iOS"""
    # Cr√©e un fond d√©grad√©
    splash = Image.new('RGB', (width, height), '#0f172a')
    
    # Ajoute l'ic√¥ne au centre
    icon = Image.open(base_icon_path)
    icon_size = min(width, height) // 4  # Ic√¥ne = 1/4 de la taille d'√©cran
    icon = icon.resize((icon_size, icon_size), Image.Resampling.LANCZOS)
    
    # Centre l'ic√¥ne
    x = (width - icon_size) // 2
    y = (height - icon_size) // 2
    
    if icon.mode == 'RGBA':
        splash.paste(icon, (x, y), icon)
    else:
        splash.paste(icon, (x, y))
    
    splash.save(output_path)

def main():
    print("üé® G√©n√©ration des ic√¥nes PWA pour NessBook...")
    
    # V√©rifie que le SVG existe
    if not SVG_PATH.exists():
        print(f"‚ùå Logo SVG non trouv√©: {SVG_PATH}")
        return
    
    # Cr√©e le dossier d'ic√¥nes
    ICONS_DIR.mkdir(exist_ok=True)
    
    print("üì± G√©n√©ration des ic√¥nes standards...")
    # G√©n√®re toutes les tailles d'ic√¥nes
    for size in ICON_SIZES:
        output_path = ICONS_DIR / f"icon-{size}.png"
        create_png_from_svg(SVG_PATH, output_path, size)
        print(f"   ‚úÖ icon-{size}.png")
    
    print("üçé G√©n√©ration des ic√¥nes Apple...")
    # G√©n√®re les ic√¥nes Apple Touch
    for size in APPLE_SIZES:
        input_path = ICONS_DIR / f"icon-{size}.png"
        output_path = ICONS_DIR / f"apple-touch-icon-{size}x{size}.png"
        # Copie l'ic√¥ne existante
        img = Image.open(input_path)
        img.save(output_path)
        print(f"   ‚úÖ apple-touch-icon-{size}x{size}.png")
    
    # Ic√¥ne Apple Touch g√©n√©rique (180x180)
    apple_main = ICONS_DIR / "apple-touch-icon.png"
    img180 = Image.open(ICONS_DIR / "icon-180.png")
    img180.save(apple_main)
    print("   ‚úÖ apple-touch-icon.png")
    
    print("üé≠ G√©n√©ration des ic√¥nes maskables...")
    # G√©n√®re les ic√¥nes maskables
    for size in [192, 512]:
        input_path = ICONS_DIR / f"icon-{size}.png"
        output_path = ICONS_DIR / f"maskable-{size}.png"
        create_maskable_icon(input_path, output_path, size)
        print(f"   ‚úÖ maskable-{size}.png")
    
    print("üåü G√©n√©ration des √©crans de d√©marrage iOS...")
    # G√©n√®re les splash screens
    base_icon = ICONS_DIR / "icon-512.png"
    for width, height in SPLASH_SCREENS:
        output_path = ICONS_DIR / f"splash-{width}x{height}.png"
        create_splash_screen(base_icon, output_path, width, height)
        print(f"   ‚úÖ splash-{width}x{height}.png")
    
    print("\nüéâ Toutes les ic√¥nes ont √©t√© g√©n√©r√©es avec succ√®s!")
    print("üìã R√©sum√©:")
    print(f"   ‚Ä¢ {len(ICON_SIZES)} ic√¥nes standards")
    print(f"   ‚Ä¢ {len(APPLE_SIZES) + 1} ic√¥nes Apple Touch")
    print(f"   ‚Ä¢ 2 ic√¥nes maskables")
    print(f"   ‚Ä¢ {len(SPLASH_SCREENS)} √©crans de d√©marrage")
    print(f"   ‚Ä¢ Total: {len(list(ICONS_DIR.glob('*.png')))} fichiers PNG")

if __name__ == "__main__":
    main()
